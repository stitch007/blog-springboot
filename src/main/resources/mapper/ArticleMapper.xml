<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="run.stitch.blog.repository.ArticleRepository">
    <resultMap id="article" type="run.stitch.blog.dto.ArticleDTO">
        <id property="id" column="id"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="summary" column="summary"/>
        <result property="coverImage" column="cover_image"/>
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
        <collection property="category" ofType="run.stitch.blog.dto.CategoryDTO">
            <id property="id" column="category_id"/>
            <result property="name" column="category_name"/>
        </collection>
        <collection property="tags" ofType="run.stitch.blog.dto.TagDTO">
            <id property="id" column="tag_id"/>
            <result property="name" column="tag_name"/>
        </collection>
    </resultMap>

    <select id="getArticles" resultMap="article">
        select a.id,
               c.id   as category_id,
               c.name as category_name,
               t.id   as tag_id,
               t.name as tag_name,
               a.title,
               a.content,
               a.summary,
               a.cover_image,
               a.create_time,
               a.update_time
        from (select id,
                     category_id,
                     title,
                     content,
                     summary,
                     cover_image,
                     create_time,
                     update_time
              from article
              where deleted = 0) a
                 join category c on a.category_id = c.id and c.deleted = 0
                 join article_tag at on a.id = at.article_id
                 join tag t on t.id = at.tag_id and t.deleted = 0
        order by a.create_time desc;
    </select>

    <select id="getArticlesByIds" resultMap="article">
        select a.id,
               c.id   as category_id,
               c.name as category_name,
               t.id   as tag_id,
               t.name as tag_name,
               a.title,
               a.content,
               a.summary,
               a.cover_image,
               a.create_time,
               a.update_time
        from (select id,
                     category_id,
                     title,
                     content,
                     summary,
                     cover_image,
                     create_time,
                     update_time
              from article
              where deleted = 0 and id in <foreach collection="ids" item="id" open="(" separator="," close=")">#{id}</foreach>) a
                 join category c on a.category_id = c.id and c.deleted = 0
                 join article_tag at on a.id = at.article_id
                 join tag t on t.id = at.tag_id and t.deleted = 0
        order by a.create_time desc;
    </select>

    <select id="getArticleByTitle" resultMap="article">
        select a.id,
               c.id   as category_id,
               c.name as category_name,
               t.id   as tag_id,
               t.name as tag_name,
               a.title,
               a.content,
               a.summary,
               a.cover_image,
               a.create_time,
               a.update_time
        from (select id,
                     category_id,
                     title,
                     content,
                     summary,
                     cover_image,
                     create_time,
                     update_time
              from article
              where deleted = 0 and title = #{title} limit 1) a
                 join category c on a.category_id = c.id and c.deleted = 0
                 join article_tag at on a.id = at.article_id
                 join tag t on t.id = at.tag_id and t.deleted = 0
        order by a.create_time desc;
    </select>
</mapper>
